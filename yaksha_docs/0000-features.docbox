!!!<div class="banner-image"><img alt="Yaksha Programming Language" src="images/yk-banner.png" style="max-width: 100%;" /></div>
---
# Language Features
---
## Data Types
---
### (Semi)Managed Strings
!!!<p><span class="green-status">done</span></p>
---
*String allocations and de-allocations are abstracted away, so strings are immutable and automatically deleted.
*Assignment copy values and automatically delete previous value.
*Strings are also copied everytime you create a new variable or pass it to a function or assign it to a container (object, array, etc).
*It is not meant to be fast. It is meant to be easily usable.
*At C code level `yk__sds` data structure will be used. (`yk__sds` is a `char*` with special header placed just before).
*💀️ Managed strings are not deleted when used in arrays, maps, or objects. (This is intentional and not a bug.)
**You need to manage deletion of `str` object in this case.
**Use `libs.strings.array.del_str_array()` to delete a string array.
*Supports `+` operator to join two `str` values.
;Data Type - `str`
;Internally this is a binary string. 
;`sds` library (part of runtime lib) takes care of the heavy lifting.
```yaksha
a: str = "hello world"
# support -> datatype ✅ | literal ✅
println(a)
```
---
### Standard integers 
---
!!!<p><span class="green-status">done</span></p>
---
*Default integer is a 32bit signed integer. 
*This is compiled to `int32_t` on all platforms.
;Data Type - `int` or `i32`
```yaksha
a: int = 4       # datatype ✅ | literal ✅
print("Four =")
println(a)
```
---
### Integer types
---
!!!<p><span class="yellow-status">in progress</span></p>
---
*Signed types - `i8`, `i16`, `i32`, `i64`
*Unsigned types - `u8`, `u16`, `u32`, `u64`
```yaksha
# Default integer type is i32
a: int = 1       # datatype ✅ | literal ✅
b: i32 = 2       # datatype ✅ | literal ✅
c: i8 = 3i8      # datatype ✅ | literal ✅
d: i16 = 4i16    # datatype ✅ | literal ✅
e: i32 = 5i32    # datatype ✅ | literal ✅
f: i64 = 6i64    # datatype ✅ | literal ✅

# Unsigned
g: u8 = 3u8      # datatype ✅ | literal ✅
h: u16 = 4u16    # datatype ✅ | literal ✅
i: u32 = 4u32    # datatype ✅ | literal ✅
j: u64 = 5u64    # datatype ✅ | literal ✅
```
---
### Float types
---
!!!<p><span class="green-status">done</span></p>
---
*`f32` or `float` - single precision floats.
;Data Type - `f32`, `float` and `f64`
*`f64` - double precision floats.
```yaksha
a: f32 = 1.0f    # datatype ✅ | literal ✅
b: f64 = 2.0     # datatype ✅ | literal ✅
c: float = 3.0f  # datatype ✅ | literal ✅
```
---
## Syntax features
---
### Let statement
!!!<p><span class="green-status">done</span></p>
---
*Create a new variable.
*If you want to assign to a variable, it needs to be created.
*If no value is provided default value for data type is used.
;Default value for `str` is an empty string.
---
```yaksha
def main() -> int:
    a: int = 10
    print(a)
    return 0
```
---
### Functions
---
#### Basic functions
---
!!!<p><span class="green-status">done</span></p>
---
*Return type must be mentioned always.
*If return type is `None` it means no data is returned. (`void` in C world.)
---
```yaksha
def main() -> int:
    print("Hello World\n")
    return 0
```
---
#### Exposing C functions
---
*💀 You can only call `@nativexxx` functions from normal functions. 
*💀 `@nativexxx` functions cannot call each other or normal functions.
---
!!!<p><span class="green-status">done</span></p>
---
##### @native - native functions
---
```yaksha
@native("getarg")
def get_arg(n: int) -> str:
    pass

@native
def get_global_arg(n: int) -> str:
    ccode "yk__sdsdup(global_args[yy__n])"
```
;If `ccode` is there instead of an argument, then it is used as the message body.
!!!<details>
!!!<summary>Click to see output C code</summary>
```c
yk__sds yy__get_arg(int32_t nn__n) { return getarg(nn__n); }
yk__sds yy__get_global_arg(int32_t nn__n) 
{
    yk__sdsdup(global_args[yy__n]);
}
```
!!!</details>
---
##### @nativemacro - macros with arguments
---
```yaksha
@nativemacro
def min_int(a: int, b:int) -> int:
    ccode "((nn__a < nn__b) ? nn__a : nn__b)"

@nativemacro("((nn__a > nn__b) ? nn__a : nn__b)")
def max_int(a: int, b:int) -> int:
    pass
```
!!!<details>
!!!<summary>Click to see output C code</summary>
```c
#define yy__min_int(nn__a, nn__b) ((nn__a < nn__b) ? nn__a : nn__b)
#define yy__max_int(nn__a, nn__b) ((nn__a > nn__b) ? nn__a : nn__b)
```
!!!</details>
---
##### @nativedefine - simple #define
---
```yaksha
@nativedefine("banana")
def banana(a: int, b: int, c:int) -> int:
    pass
```
!!!<details>
!!!<summary>Click to see output C code</summary>
```c
#define yy__banana banana
```
!!!</details>
---
##### @varargs - variable argument functions
---
*💀 Can only be used with `@nativedefine`.
---
```yaksha
@nativedefine("yk__newsdsarray")
@varargs
def new(count: int, s: str) -> Array[str]:
    pass
```
!!!<details>
!!!<summary>Click to see output C code</summary>
```c
#define yy__new yk__newsdsarray
// Assume that yk__newsdsarray is something like below
// yk__sds *yk__newsdsarray(size_t count, ...)
```
!!!</details>
---
---
#### Template functions
---
!!!<p><span class="red-status">not started</span></p>
---
*Return type can also be a template-arg if that template-arg is used in parameters.
*String passed inside `@template(` should be single upper case characters separated by commas.
;This means it is limited to 26 template arguments max.
---
```yaksha
@native("yk__arrput")
@template("T")
def arrput(a: Array[T], v: T) -> None:
    pass

@native("yk__hmput")
@template("K,V")
def hmput(a: HashMap[K,V], key: K, value: V) -> None:
    pass

@native("yk__hmget")
@template("K,V")
def hmget(a: HashMap[K,V], key: K) -> V:
    pass
```
---
#### GPU/OpenCL device functions
---
!!!<p><span class="red-status">not started</span><span class="blue-status">planned for v0.5</span></p>
---
*Easy access to GPU through OpenCL.
```yaksha
@device
def calculate(n: int) -> int:
   return 1 + 1 
```
---
### Defer statement
---
!!!<p><span class="green-status">done</span></p>
---
*Defer something to happen at the end of the scope.
*Before any `return` from a function.
*Before `break`, `continue` or end of `while` loop body.
**This behaviour is different from what you see in go-lang.
*Before end of `if` body or end of `else` body.
;`defer` works as a stack.
;That means deferred expressions are executed in last deferred first executed order. 
---
```yaksha
def onexit() -> int:
    println("All done")
    return 0

def main() -> int:
    defer onexit()
    println("Hello World")
    return 0
```
---
Output:
```text
Hello World
All done
```
---
### Del statement
---
!!!<p><span class="yellow-status">In progress</span></p>
---
*Delete values.
*Delete arrays, and other builtin data structures without deleting content.
---
```yaksha
def main() -> int:
    a: Array[int]
    defer del a
    arrput(a, 1)
    arrput(a, 2)
    arrput(a, 3)
    println(a[0])
    return 0
```
;Compiles to `free` or other runtime functions.
---
### Class statement
---
!!!<p><span class="yellow-status">in progress</span></p>
---
*Create a custom data structure.
*💀 Templated structures are not supported yet.
*💀 Inheritance is not supported yet.
---
```yaksha
class Student:
    student_id: int
    name: str
    address: str

class Teacher:
    teacher_id: int
    name: str
    address: str
```
---
#### Creating and freeing objects
---
```yaksha
def main() -> int:
    # Non primitive types are initialized to None 
    john: Student
    # Creating an instance, will be allocated in heap
    # Results in a malloc
    john = Student()
    defer del john
    # Set fields
    john.student_id = 10
    # str objects in structures are not freed automatically
    john.name = "John Smith"
    john.address = "1 Road, Negombo"
    defer del john.name
    defer del john.address
    return 0
```
---
It might be better to create a custom function to delete custom objects.
---
```yaksha
def del_student(st: Student) -> None:
    del st.name
    del st.address
    del st 

def main() -> int:
    john: Student = Student()
    defer del_student(john)
    
    john.student_id = 10
    john.name = "John Smith"
    john.address = "1 Road, Negombo"
    return 0
```
---
#### Exposing native structures
---
```yaksha
@nativedefine("something")
class Something:
    something_id: int

# Use @dotaccess for purely stack allocated structs
@nativedefine("Color")
@dotaccess
class Color:
    r: int
    g: int
    b: int
```
!!!<details>
!!!<summary>Click to see output C code</summary>
```c
#define yy__Something something
#define yy__Color Color
```
!!!</details>
---
### Import statement
---
!!!<p><span class="yellow-status">in progress</span></p>
---
*Import a file.
---
```yaksha
import io

def main() -> int:
    file: io.File = io.open("Haha")
    defer io.close(file)
    if file == None:
        println("-- failed to read file --")
        return 1
    data: str = io.readall(file)
    println("-- read file --")
    println(data) 
    return 0
```
;Name mangling takes place for this.
---
## Builtin Functions
---
!!!<p><span class="yellow-status">in progress</span></p>
---
* ✅ `print(primitive) -> None` - Print without a new line
* ✅ `println(primitive) -> None` - Print + new line
* ✅ `len(Array[T]) -> int` - Get length of arrays,maps
* ✅ `arrput(Array[T], T) -> None` - Put item to an array
* ✅ `arrpop(Array[T]) -> T` - Remove last item from an array and return it
* ✅ `arrnew("T", int) -> Array[T]` - Create a new array of given size. (Uninitialized elements)
* ✅ `arrsetcap(Array[T], int) -> None` - Set array capacity / grow memory. Does not affect length.
* ✅ `arrsetlen(Array[T], int) -> None` - Set array length. Each element will be an uninitialized element.
* ✅ `array("T", T...) -> Array[T]` - Create a new array from given elements
* ✅ `getref(T) -> Ptr[T]` - Get a pointer to given object
* ✅ `unref(Ptr[T]) -> T` - Dereference a pointer
* ✅ `charat(str, int) -> int` - Get a character at a specific location in string
* ✅ `shnew(Array[SMEntry[T]]) -> None` - Initialize Array[SMEntry[T]] object
* ✅ `shput(Array[SMEntry[T]], str, T) -> None` - Put item to an Array[SMEntry[T]]
* ✅ `shget(Array[SMEntry[T]], str) -> T` - Get item from an Array[SMEntry[T]]
* ✅ `shgeti(Array[SMEntry[T]], str) -> int` - Get item index from an Array[SMEntry[T]] (-1 if not found)
* ✅ `hmnew(Array[MEntry[K,T]]) -> None` - Initialize Array[MEntry[K,T]] object
* ✅ `hmput(Array[MEntry[K,T]], K, T) -> None` - Put item to an Array[MEntry[K,T]]
* ✅ `hmget(Array[MEntry[K,T]], K) -> T` - Get item from an Array[MEntry[K,T]]
* ✅ `hmgeti(Array[MEntry[K,T]], K) -> int` - Get item index from an Array[MEntry[K,T]] (-1 if not found)
* ✅ `cast("T", X) -> T` - Data type casting builtin
* ✅ `qsort(Array[T],Function[In[Const[AnyPtrToConst],Const[AnyPtrToConst]],Out[int]]) -> bool` - Sort an array, returns True if successful
* ✅ `iif(bool, T, T) -> T` - Ternary functionality
* ✅ `foreach(Array[T],Function[In[T,V],Out[bool]],V) -> bool` - For each element in array execute given function
* ✅ `countif(Array[T],Function[In[T,V],Out[bool]],V) -> int` - For each element in array count if function returns true
* ✅ `filter(Array[T],Function[In[T,V],Out[bool]],V) -> Array[T]` - Create a new array with filtered elements based on return value of given function
* ✅ `map(Array[T],Function[In[T,V],Out[K]],V) -> Array[K]` - Create a new array with result of given function
* ✅ `binarydata("data") -> Const[Ptr[Const[u8]]]` - Create constant binary data (must pass in a string literal).\nReturns Const[Ptr[Const[u8]]] that does not need to be deleted.
;Builtin functions may call different implementations based on input.
---
## Non primitive data types
---
This section describes other essential types of builtin structures.
---
### Dynamic Arrays
---
!!!<p><span class="yellow-status">in progress</span></p>
---
```yaksha
def main() -> int:
    a: Array[i32]
    # Prior to calling arrput pointer is set to None
    defer del a
    arrput(a, 1)
    arrput(a, 2)
    # Array access works with `[]`
    print(a[0])
    return 0
```
;Must ensure array elements are freed. `int` need not be deleted as they are primitive types.
---
### String Hash Map
---
!!!<p><span class="yellow-status">in progress</span></p>
---
HashMap with str keys and given data type values.
Values need to be deleted when no longer needed.
---
```yaksha
def main() -> int:
    m: Array[SMEntry[int]]
    # shnew must be called before using the array as a String Hash Map
    shnew(m)
    defer del m
    shput(m, "banana", 10)
    r: int = shget(m, "banana")
    return r
```
;`Array[SMEntry[?]]` keys are deleted automatically when `del` is invoked.
;`len` will give the total number of elements of the String Hash Map.
---
### Hash Map
---
!!!<p><span class="red-status">not started</span></p>
---
Simple single key single value hashmaps.
---
;Data type `Array[MEntry[?]]`.
;key and value both need to be deleted.
---