---
# WASM4 Support Library
---
Support for WASM4 fantasy console. 
Additionally following function in `libs` work.
* `libs.random.random_u64`
* `libs.random.set_seed`
; wasm4 is created by Bruno Garcia and contributors.
; Yaksha wraps `wasm4.h`
---
## w4
---
```yaksha
BLIT_1BPP: Const[u32]
BLIT_2BPP: Const[u32]
BLIT_FLIP_X: Const[u32]
BLIT_FLIP_Y: Const[u32]
BLIT_ROTATE: Const[u32]
BUTTON_1: Const[u8]
BUTTON_2: Const[u8]
BUTTON_DOWN: Const[u8]
BUTTON_LEFT: Const[u8]
BUTTON_RIGHT: Const[u8]
BUTTON_UP: Const[u8]
MOUSE_LEFT: Const[u8]
MOUSE_MIDDLE: Const[u8]
MOUSE_RIGHT: Const[u8]
SCREEN_SIZE: Const[int]
# Screen size of wasm4 console
SYSTEM_HIDE_GAMEPAD_OVERLAY: Const[u8]
SYSTEM_PRESERVE_FRAMEBUFFER: Const[u8]
TONE_MODE1: Const[u32]
TONE_MODE2: Const[u32]
TONE_MODE3: Const[u32]
TONE_MODE4: Const[u32]
TONE_NOISE: Const[u32]
TONE_PAN_LEFT: Const[u32]
TONE_PAN_RIGHT: Const[u32]
TONE_PULSE1: Const[u32]
TONE_PULSE2: Const[u32]
TONE_TRIANGLE: Const[u32]
def blit(data: Ptr[Const[u8]], x: int, y: int, width: u32, height: u32, flags: u32) -> None
# Copies pixels to the framebuffer
def blit_sub(data: Ptr[Const[u8]], x: int, y: int, width: u32, height: u32, src_x: u32, src_y: u32, stride: u32, flags: u32) -> None
# Copies a subregion within a larger sprite atlas to the framebuffer
def diskr(dest: AnyPtr, size: u32) -> u32
# Reads up to `size` bytes from persistent storage into the pointer `dest`
def diskw(src: AnyPtrToConst, size: u32) -> u32
# Writes up to `size` bytes from the pointer `src` into persistent storage
def draw_colors() -> u16
# Read draw colors
def framebuffer() -> Ptr[u8]
# Access pointer to framebuffer
def gamepad1() -> u8
# Read gamepad 1 value
def gamepad2() -> u8
# Read gamepad 2 value
def gamepad3() -> u8
# Read gamepad 3 value
def gamepad4() -> u8
# Read gamepad 4 value
def hline(x: int, y: int, length: u32) -> None
# Draws a horizontal line
def line(x1: int, y1: int, x2: int, y2: int) -> None
# Draws a line between two points
def mouse_buttons() -> u8
# Read mouse buttons
def mouse_x() -> i16
# Read mouse x
def mouse_y() -> i16
# Read mouse y
def netplay() -> int
def oval(x: int, y: int, width: u32, height: u32) -> None
# Draws an oval (or circle)
def palette() -> Ptr[u32]
# Get a pointer to pallet
def rect(x: int, y: int, width: u32, height: u32) -> None
# Draws a rectangle
def set_draw_colors(value: u16) -> None
# Set draw colors
def set_game_state(data: AnyPtr) -> None
# Set a state value to be passed to game_step() function
def set_palette(c1: u32, c2: u32, c3: u32, c4: u32) -> None
# Set palette
def set_system_flags(value: u8) -> None
# Set system flags
def system_flags() -> u8
# Read system flags
def text(text_data: str, x: int, y: int) -> None
# Draws text using the built-in system font
def text_u8(text_data: Ptr[Const[u8]], x: int, y: int) -> None
# Draws text from given binarydata("text") (or manually created u8 Ptr) (no string allocation)
def tone(frequency: u32, duration: u32, volume: u32, flags: u32) -> None
# Plays a sound tone
def trace(text_data: str) -> None
# Prints a message to the debug console
def trace_u8(text_data: Ptr[Const[u8]]) -> None
# Prints a message to the debug console from given binarydata("text") (or manually created u8 Ptr) (no string allocation)
def vline(x: int, y: int, length: u32) -> None
# Draws a vertical line
```
---
